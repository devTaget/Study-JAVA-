메소드
   이름 뒤에 소괄호.
   단, 키워드 뒤에 소괄호는 메소드가 아니다.

   f    (x) = 2x + 1
       ---   ---   ------   
      메소드명   매개   리턴값
      변수

메소드 선언
   (1)리턴타입 (2)메소드명(자료형 (3)매개변수명, ...){
      (4)실행할 문장;
      (5)return 리턴값;
   }

   (1) 리턴 값이 있다면 리턴 값의 자료형을 작성하고, 리턴 값이 없다면 비워놓지 않고 void를 작성한다.
   (2) 동사로 작성한다(연필(매개변수)을 쓴다(메소드)).
   (3) 외부에서 전달받을 값이 있다면, 자료형과 순서에 맞게 선언해준다.
       생략 시, 외부에서 값을 전달받을 수 없게 된다.
   (4) 생략이 가능하다. 메소드의 기능을 구현하는 로직을 작성한다.
   (5) 생략이 가능하다. 리턴값이 있다면, 사용한 부분 통채로를 리턴값으로 봐야한다.

메소드 선언 순서
   문제) 두 정수의 덧셈 메소드 선언

   1. 메소드의 이름을 생각한다.
      add(){}

   2. 매개변수를 생각한다.
      add(int num1, int num2){}

   3. 실행할 문장을 생각한다.
      add(int num1, int num2){
         int result = num1 + num2;
      }

   4. 리턴값을 생각한다.
      add(int num1, int num2){
         int result = num1 + num2;
         return result;
      }      

   5. 리턴타입을 결정한다.
      int add(int num1, int num2){
         int result = num1 + num2;
         return result;
      }      

메소드 주의사항
   메소드를 선언할 때에는 {}(중괄호)가 있으며, 반드시 메소드 밖에서 선언한다.
   메소드를 사용할 때에는 {}(중괄호)가 없으며, 반드시 메소드 안에서 사용한다.

메소드 사용
   메소드의 리턴 타입이 void라면 실행 메소드이므로 값으로 봐서는 절대 안된다.
   메소드의 리턴 타입이 void가 아니라면 사용한 부분 통채로가 리턴값이다.


















