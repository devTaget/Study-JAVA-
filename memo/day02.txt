변수의 선언
   자료형 변수명 = 초기값; //초기화
   자료형 변수명;

변수 선언 시 주의사항
   1. 같은 이름의 변수로 선언할 수 없다.
   2. 초기화를 해준다.
   3. 되도록 선언부에 한꺼번에 선언한다(영역 상단).

변수명 주의사항
   문자로 시작해야 한다.
   특수문자는 사용할 수 없다. 단, _는 허용한다.
   소문자로 시작한다.
   공백을 사용할 수 없다.
   
   goodBoy : 카멜 표기법(JAVA)
   good_boy : 파스칼 표기법, 스네이크 표기법, 팟홀 표기법, 언더바 표기법(DBMS)

   되도록 한글은 사용하지 않는다.
   명사로 사용한다.
   뜻이 있는 단어를 사용한다.
   a, b, c, d, e, ... (X)
   data, number, age, name, ...(O)

변수를 사용하는 이유
   1. 반복되는 값을 쉽게 관리할 수 있다.
   2. 의미 없는 값을 하나의 정보로 만들기 위해서(자료구조).
===========================================================================
서식문자(format)
   반드시 따옴표 안에서 작성한다.
   
   %d : decimal(10진수 정수)
   %o : ocatal(8진수 정수)
   %x : hexadecimal(16진수 정수)
   %f : float(실수)
   %c : character(문자)
   %s : string(문자열)

출력 메소드
   printf() : 서식 문자를 사용하여 출력할 수 있으며, 자동으로 줄바꿈되지 않는다.
===========================================================================
상수
   항상 그대로인 수.
   값을 변경할 수 없도록 한다.

   final type name = value;

상수를 사용하는 이유
   1. 의미 없는 값에 의미를 부여하기 위해서
   2. 오타 방지
==============================================================================
형변환
   - 자동 형변환
      정수 + 정수 = 정수
      정수 + 실수 = 실수
      3 + 0.0 = 3.0
      5 / 2 = 2
      5.0 / 2 = 2.5

      문자 + 정수 = 정수

   - 강제 형변환
      (type)value
      (double)3

문자열 형변환
   1. 다른 자료형을 문자열로
      문자열과 다른 일반 자료형을 연결하면 결과는 문자열이 된다.

   2. 문자열을 다른 자료형으로
      일반 자료형은 일반 자료형끼리만 형변환이 가능하다.
      문자열 타입은 클래스 타입이므로, 일반 자료형의 클래스타입의 도움을 받아야한다.

      Integer.parseInt("")   => 문자열에서 변환된 정수 값
      Float.parseFloat("")   => 문자열에서 변환된 실수 값
      Double.parseDouble("")   => 문자열에서 변환된 실수 값
      ...
==================================================================================
입력
   커서가 깜빡이고 있는 상태.
   입력하기 전에 출력을 통해 어떤 값을 입력해야할지 사용자에게 알려주어야 한다.

입력 클래스
   Scanner sc = new Scanner(System.in);

입력 메소드
   next() : 사용자가 입력한 문자열 값
      - 사용자가 입력한 값 중 공백 또는 줄바꿈 문자를 구분점으로 각 문자열을 분리한다.
      - 첫 번째 문자열을 첫 번째 next()에 담고
        두 번째 문자열은 두 번째 next()에 담는다.

   nextLine() : 사용자가 입력한 문자열 값
      - 공백 또는 줄바꿈 문자도 값으로 취급하기 때문에 그대로 입력받는다.
==================================================================================
연산자
   기능이 있는 특수문자

연산자의 우선순위
   최우선 연산자
   단항 연산자
   산술 연산자
   쉬프트 연산자
   관계 연산자
   논리 연산자
   삼항 연산자
   대입 연산자

결합성
   하나의 수식에 동일한 연산자가 여러 개 사용되면 알맞은 방향으로 결합되어 연산되는 성질

비트 연산
   논리 연산자
      & (AND, 논리곱), A & B, 두 비트가 모두 1이면 1
      | (OR, 논리합), A | B, 둘 중 하나라도 1이면 1
      ^ (XOR, 배타논리합), A ^ B, 두 비트가 서로 달라야 1

   단항 연산자
      ~ (NOT, 논리부정), ~A, 0은 1로 1은 0으로 변경, ~a = -a-1

   쉬프트 연산자
      << (LEFT SHIFT, 좌쉬프트), A << B, A를 왼쪽으로 B만큼 비트이동
      >> (RIGHT SHIFT, 우쉬프트), A >> B, A를 오른쪽으로 B만큼 비트이동
----------------------------------------------------------------------------------------
논리형(boolean)
   참 : true
   거짓 : false

   boolean(1byte) = true, false

조건식
   결과가 참 또는 거짓, 둘 중 하나가 나오는 식.
   참 또는 거짓 값.

   관계 연산자
      ==   : 같다
      !=   : 같지 않다
      >, <   : 초과, 미만
      >=, <=   : 이상, 이하

   논리 연산자
      &&, A && B, 두 조건식 모두 참이면 참
      ||, A || B, 둘 중 하나라도 참이면 참

   단항 연산자
      !(NOT), !A, 조건식이 참이면 거짓으로, 거짓이면 참으로 변경
----------------------------------------------------------------------------------
삼항 연산자( ? : ) : 값으로 봐야한다!
   조건식 ? 참 : 거짓

   int result = 10 > 9 ? 10 : 9;
   단, 참과 거짓 자리에는 값만 작성할 수 있다.
   

















